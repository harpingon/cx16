
; ******** Source: gol1.asm
     1                          zr = $20          ;get zome zero page vars to work with
     2                          
     3                          z_hl = zr         ;hl Pair
     4                          z_l  = zr
     5                          z_h  = zr+1
     6                          
     7                          z_de = zr+4       ;de pair
     8                          z_e  = zr+4
     9                          z_d  = zr+5
    10                          
    11                          z_as = zr+6       ;hold a
    12                          
    13                          CursorX = zr+7
    14                          CursorY = zr+8
    15                          Character = zr+9
    16                          Colour = zr+10
    17                          
    18                          ach = $58  
    19                          
    20                          aa = zr+14 		;to store regs that would be sent to vera to build action list
    21                          kx = zr+15
    22                          ky = zr+16
    23                          nn = zr+17		;neighbor count
    24                          
    25                          bx = zr+20		; hold current cursor for checking square
    26                          by = zr+21
    27                          
    28                          mkll = $60		; build a list at this address, initially set to list base
    29                          mklh = mkll+1		; high byte
    30                          mkly = mkll+2		; store current list Y indirect index register
    31                          sx = zr+25		; store X in list
    32                          sy = zr+26		; store Y in list
    33                          sc = zr+27		; store char in list
    34                          
    35                          qc = zr+28		; vera character query result
    36                          kc = zr+29		; original cell value          
    37                          

; ******** Source: vera.inc
     1                          ; License: Public Domain
     2                          
     3                          verareg =$9f20
     4                          veralo  = verareg+0
     5                          veramid = verareg+1
     6                          verahi  = verareg+2
     7                          veradat = verareg+3
     8                          veradat2= verareg+4
     9                          veractl = verareg+5
    10                          veraien = verareg+6
    11                          veraisr = verareg+7
    12                          
    13                          vreg_cmp  = $F0000
    14                          vreg_pal  = $F1000
    15                          vreg_lay1 = $F2000
    16                          vreg_lay2 = $F3000
    17                          vreg_spr  = $F4000
    18                          vreg_sprd = $F5000
    19                          
    20                          AUTO_INC_1 = $100000
    21                          
    22                          !macro vset .addr {
    23                          	lda #<(.addr >> 16) | $10
    24                          	sta verahi
    25                          	lda #<(.addr >> 8)
    26                          	sta veramid
    27                          	lda #<(.addr)
    28                          	sta veralo
    29                          }
    30                          
    31                          !macro vstore .addr {
    32                          	pha
    33                          	+vset .addr
    34                          	pla
    35                          	sta veradat
    36                          }
    37                          
    38                          !macro vload .addr {
    39                          	+vset .addr
    40                          	lda veradat
    41                          }
    42                          
    43                          !macro sprset .offset {
    44                          	lda #<(vreg_sprd >> 16) | $10
    45                          	sta verahi
    46                          	txa
    47                          	lsr
    48                          	lsr
    49                          	lsr
    50                          	lsr
    51                          	lsr
    52                          	clc
    53                          	adc #<(vreg_sprd + .offset >> 8)
    54                          	sta veramid
    55                          	txa
    56                          	asl
    57                          	asl
    58                          	asl
    59                          	clc
    60                          	adc #<((vreg_sprd + .offset))
    61                          	sta veralo
    62                          }
    63                          
    64                          !macro sprload .offset {
    65                          	+sprset .offset
    66                          	lda veradat
    67                          }
    68                          
    69                          !macro sprstore .offset {
    70                          	pha
    71                          	+sprset .offset
    72                          	pla
    73                          	sta veradat
    74                          }
    75                          
    76                          !macro video_init {
    77                          	lda #0
    78                          	sta veractl ; set ADDR1 active
    79                          	sta veramid
    80                          	lda #$1F    ; $F0000 increment 1
    81                          	sta verahi
    82                          	lda #$00
    83                          	sta veralo
    84                          	lda #1
    85                          	sta veradat ; VGA output
    86                          }

; ******** Source: gol1.asm
    39                          *=$0801			; Assembled code should start at $0801
    40                          			; (where BASIC programs start)
    41                          			; The real program starts at $0810 = 2064
    42  0801 0c08               !byte $0C,$08		; $080C - pointer to next line of BASIC code
    43  0803 0a00               !byte $0A,$00		; 2-byte line number ($000A = 10)
    44  0805 9e                 !byte $9E		; SYS BASIC token
    45  0806 20                 !byte $20		; [space]
    46  0807 32303634           !byte $32,$30,$36,$34	; $32="2",$30="0",$36="6",$34="4"
    47                          			; (ASCII encoded nums for dec starting addr)
    48  080b 00                 !byte $00		; End of Line
    49  080c 0000               !byte $00,$00		; This is address $080C containing
    50                          			; 2-byte pointer to next line of BASIC code
    51                          			; ($0000 = end of program)
    52                          *=$0810			; Here starts the real program
    53  0810 a9008d259f8d219f...+video_init
    54  0827 a9108d229fa9008d...+vset $00000 | AUTO_INC_1 ; VRAM bank 0
    55                          
    56                          CHROUT=$FFD2		; CHROUT outputs a character (C64 Kernal API)
    57                          CHRIN=$FFCF		; CHRIN read from default input
    58                          CURRENT=$0
    59                          
    60                          start:
    61  0836 a920               	lda #32 	; space
    62  0838 8529               	sta Character
    63  083a a903               	lda #3		; light blue
    64  083c 852a               	sta Colour
    65  083e 20330a             	jsr fullscreen
    66                          
    67  0841 a92a               	lda #$2A	; star
    68  0843 8529               	sta Character
    69                          
    70  0845 a902               	lda #2 		; red
    71  0847 a907               	lda #7 		; yellow
    72  0849 852a               	sta Colour
    73                          
    74                          	; 37 , 30
    75                          
    76  084b 206108             	jsr readlist
    77                          
    78  084e 20cfff             	jsr CHRIN
    79  0851 20cfff             	jsr CHRIN
    80                          
    81                          neverend:
    82  0854 209a08             	jsr initlist
    83  0857 20e408             	jsr queryscreen
    84  085a 206108             	jsr readlist
    85                          	
    86                          
    87  085d 4c5408             	jmp neverend
    88                          
    89  0860 60                 	rts
    90                          
    91                          
    92                          

; ******** Source: readlist.inc
     1                          readlist:
     2  0861 a9bd               	lda #<.actions		; address the action list
     3  0863 8558               	sta ach
     4  0865 a20a               	ldx #>.actions
     5  0867 8659               	stx ach+1
     6  0869 a000               	ldy #0
     7                          readloop:
     8  086b b158               	lda (ach),y
     9  086d c9ff               	cmp #255 		; is this the last action
    10  086f d001               	bne outputaction        ; no - update vera
    11  0871 60                 	rts
    12                          
    13                          outputaction:
    14  0872 8529               	sta Character
    15  0874 c8                 	iny			; is there a better way than iny/beq four times 
    16  0875 f014               	beq pageinc1		; to check for the end of the actions list?
    17                          ret1:
    18  0877 b158               	lda (ach),y
    19  0879 8527               	sta CursorX
    20  087b c8                 	iny
    21  087c f012               	beq pageinc2
    22                          ret2:
    23  087e b158               	lda (ach),y
    24  0880 8528               	sta CursorY
    25  0882 c8                 	iny
    26  0883 f010               	beq pageinc3
    27                          ret3:
    28  0885 20550a             	jsr veraprint
    29  0888 4c6b08             	jmp readloop
    30                          pageinc1:
    31  088b e659               	inc ach+1
    32  088d 4c7708             	jmp ret1
    33                          pageinc2:
    34  0890 e659               	inc ach+1
    35  0892 4c7e08             	jmp ret2
    36                          pageinc3:
    37  0895 e659               	inc ach+1
    38  0897 4c8508             	jmp ret3

; ******** Source: gol1.asm
    93                          	; read and implement the action list
    94                          

; ******** Source: makelist.inc
     1                          ;
     2                          ; initialise the orders list and allow a new order to be appended to the list
     3                          ;
     4                          initlist:
     5  089a 48                 	pha
     6  089b 5a                 	phy
     7  089c a9bd               	lda #<.actions		; address the action list
     8  089e 8560               	sta mkll
     9  08a0 a90a               	lda #>.actions
    10  08a2 8561               	sta mklh 
    11  08a4 a000               	ldy #0
    12  08a6 8462               	sty mkly		; store zero in mkly so list addition begins at the start
    13  08a8 a9ff               	lda #255		; store end of list FF in three bytes
    14  08aa 9160               	sta (mkll),y
    15  08ac c8                 	iny
    16  08ad 9160               	sta (mkll),y
    17  08af c8                 	iny
    18  08b0 9160               	sta (mkll),y
    19  08b2 7a                 	ply
    20  08b3 68                 	pla
    21  08b4 60                 	rts
    22                          
    23                          storeaction:
    24  08b5 48                 	pha
    25  08b6 5a                 	phy
    26  08b7 da                 	phx
    27  08b8 a462               	ldy mkly		; pick up list index
    28  08ba a53b               	lda sc			; character to store
    29  08bc 9160               	sta (mkll),y
    30  08be c8                 	iny			; rolled over?
    31  08bf f014               	beq storeinc1	        ; yes! inc the high addr
    32                          storecharx:
    33  08c1 a539               	lda sx			; x position to set char
    34  08c3 9160               	sta (mkll),y
    35  08c5 c8                 	iny			; rolled over?
    36  08c6 f012               	beq storeinc2	        ; yes! inc the high addr
    37                          storechary:
    38  08c8 a53a               	lda sy
    39  08ca 9160               	sta (mkll),y
    40  08cc c8                 	iny			; rolled over?
    41  08cd f010               	beq storeinc3		; yes! inc the high addr
    42                          storechardone:
    43  08cf 8462               	sty mkly		; store away the index for the next addition
    44  08d1 fa                 	plx
    45  08d2 7a                 	ply
    46  08d3 68                 	pla
    47  08d4 60                 	rts			
    48                          storeinc1:
    49  08d5 e661               	inc mklh
    50  08d7 4cc108             	jmp storecharx
    51                          storeinc2:
    52  08da e661               	inc mklh
    53  08dc 4cc808             	jmp storechary
    54                          storeinc3:
    55  08df e661               	inc mklh
    56  08e1 4ccf08             	jmp storechardone

; ******** Source: gol1.asm
    95                          	; initialise and allow adding to the action list
    96                          	

; ******** Source: algo.inc
     1                          ;
     2                          ; game of life algorithm. Shall the cell be born, survive or die 
     3                          ;
     4                          queryscreen:
     5  08e4 a94f               	lda #79
     6  08e6 8527               	sta CursorX
     7  08e8 a93b               	lda #59
     8  08ea 8528               	sta CursorY
     9                          queryleft:
    10  08ec 200209             	jsr querycolumn
    11  08ef c627               	dec CursorX
    12  08f1 d0f9               	bne queryleft
    13  08f3 200209             	jsr querycolumn ; make sure to do the last X column (0)
    14  08f6 a9ff               	lda #255	; terminate the list
    15  08f8 8539               	sta sx
    16  08fa 853a               	sta sy
    17  08fc 853b               	sta sc
    18  08fe 20b508             	jsr storeaction
    19  0901 60                 	rts		; Return to caller
    20                          
    21                          querycolumn:
    22  0902 20690a             	jsr veraquery
    23  0905 201709             	jsr neighbors
    24  0908 c628               	dec CursorY
    25  090a d0f6               	bne querycolumn
    26  090c 20690a             	jsr veraquery
    27  090f 201709             	jsr neighbors	; make sure to do the final character
    28  0912 a93b               	lda #59
    29  0914 8528               	sta CursorY
    30  0916 60                 	rts
    31                          	
    32                          neighbors:
    33  0917 48                 	pha
    34  0918 5a                 	phy
    35  0919 da                 	phx
    36  091a 6431               	stz nn		; start with zero neighbors
    37  091c a53c               	lda qc
    38  091e 853d               	sta kc		; keep the current cell state in kc
    39  0920 a527               	lda CursorX	
    40  0922 852f               	sta kx		; keep our current pos X
    41  0924 a528               	lda CursorY
    42  0926 8530               	sta ky		; keep our current pos Y
    43                          
    44  0928 c627               	dec CursorX	; start on the upper left
    45  092a c628               	dec CursorY
    46  092c a9ff               	lda #255
    47  092e c527               	cmp CursorX	; did it wrap?
    48  0930 d004               	bne nc1		; nope
    49  0932 a94f               	lda #79		; wrap to right edge
    50  0934 8527               	sta CursorX	
    51                          nc1:
    52  0936 a9ff               	lda #255
    53  0938 c528               	cmp CursorY	; did it wrap?
    54  093a d004               	bne nc2		; nope
    55  093c a93b               	lda #59
    56  093e 8528               	sta CursorY
    57                          nc2:
    58  0940 20690a             	jsr veraquery 	; top left
    59  0943 202a0a             	jsr addif	
    60  0946 e627               	inc CursorX	; top middle
    61  0948 a950               	lda #80
    62  094a c527               	cmp CursorX	; did it wrap?
    63  094c d004               	bne nc3		; nope
    64  094e a900               	lda #0
    65  0950 8527               	sta CursorX	; wrap to left edge
    66                          nc3:
    67  0952 20690a             	jsr veraquery	; top middle
    68  0955 202a0a             	jsr addif
    69  0958 e627               	inc CursorX	; top right
    70  095a a950               	lda #80
    71  095c c527               	cmp CursorX	; did it wrap?
    72  095e d004               	bne nc4		; nope
    73  0960 a900               	lda #0
    74  0962 8527               	sta CursorX	; wrap to left edge
    75                          nc4:
    76  0964 20690a             	jsr veraquery	; top right
    77  0967 202a0a             	jsr addif
    78                          
    79  096a a52f               	lda kx		; reset to middle
    80  096c 8527               	sta CursorX
    81  096e a530               	lda ky
    82  0970 8528               	sta CursorY
    83                          
    84  0972 c627               	dec CursorX	; middle left
    85  0974 a9ff               	lda #255
    86  0976 c527               	cmp CursorX	; did it wrap?
    87  0978 d004               	bne nc5		; nope
    88  097a a94f               	lda #79		; wrap to right edge
    89  097c 8527               	sta CursorX
    90                          nc5:
    91  097e 20690a             	jsr veraquery	; middle left
    92  0981 202a0a             	jsr addif
    93                          
    94  0984 a52f               	lda kx
    95  0986 8527               	sta CursorX
    96  0988 e627               	inc CursorX	; middle right
    97  098a a950               	lda #80
    98  098c c527               	cmp CursorX	; did it wrap?
    99  098e d004               	bne nc6		; nope
   100  0990 a900               	lda #0
   101  0992 8527               	sta CursorX	; wrap to left edge
   102                          nc6:
   103  0994 20690a             	jsr veraquery
   104  0997 202a0a             	jsr addif
   105                          	
   106  099a a52f               	lda kx		; reset to middle
   107  099c 8527               	sta CursorX
   108  099e a530               	lda ky
   109  09a0 8528               	sta CursorY
   110                          	
   111  09a2 e628               	inc CursorY	; lower left
   112  09a4 a93c               	lda #60
   113  09a6 c528               	cmp CursorY	; did it wrap?
   114  09a8 d004               	bne nc7		; nope
   115  09aa a900               	lda #0
   116  09ac 8528               	sta CursorY	; wrap to top
   117                          nc7:
   118  09ae c627               	dec CursorX
   119  09b0 a9ff               	lda #255
   120  09b2 c527               	cmp CursorX	; did it wrap?
   121  09b4 d004               	bne nc8		; nope
   122  09b6 a94f               	lda #79
   123  09b8 8527               	sta CursorX	; wrap to right edge
   124                          nc8:
   125  09ba 20690a             	jsr veraquery 	; lower left
   126  09bd 202a0a             	jsr addif
   127                          
   128  09c0 e627               	inc CursorX	; bottom middle
   129  09c2 a950               	lda #80
   130  09c4 c527               	cmp CursorX	; did it wrap?
   131  09c6 d004               	bne nc9		; nope
   132  09c8 a900               	lda #0		; wrap to left
   133  09ca 8527               	sta CursorX
   134                          nc9:
   135  09cc 20690a             	jsr veraquery	; bottom middle
   136  09cf 202a0a             	jsr addif
   137                          
   138  09d2 e627               	inc CursorX	; bottom right
   139  09d4 a950               	lda #80
   140  09d6 c527               	cmp CursorX	; did it wrap?
   141  09d8 d002               	bne nc10	; nope 
   142  09da a900               	lda #0		; wrap to left
   143                          nc10:
   144  09dc 20690a             	jsr veraquery
   145  09df 202a0a             	jsr addif
   146                          
   147                          	; that should be all the neighbors added, find
   148                          	; out if we live or die
   149                          
   150  09e2 a92a               	lda #$2A
   151  09e4 c53d               	cmp kc		; is the existing cell living or dead
   152  09e6 f01b               	beq living
   153  09e8 a903               	lda #3		; only thing a dead cell can do is be born on 3 count
   154  09ea c531               	cmp nn
   155  09ec f003               	beq born
   156  09ee 4c1e0a             	jmp eol
   157                          born:
   158  09f1 a92a               	lda #$2A	; make cell live
   159  09f3 853b               	sta sc
   160  09f5 a52f               	lda kx
   161  09f7 8539               	sta sx
   162  09f9 a530               	lda ky
   163  09fb 853a               	sta sy
   164  09fd 20b508             	jsr storeaction
   165  0a00 4c1e0a             	jmp eol
   166                          
   167                          living:
   168  0a03 a902               	lda #2
   169  0a05 c531               	cmp nn
   170  0a07 f015               	beq eol		; this one survived
   171  0a09 a903               	lda #3
   172  0a0b c531               	cmp nn
   173  0a0d f00f               	beq eol		; as did this one   
   174  0a0f a920               	lda #32		; make cell die
   175  0a11 853b               	sta sc
   176  0a13 a52f               	lda kx
   177  0a15 8539               	sta sx
   178  0a17 a530               	lda ky
   179  0a19 853a               	sta sy
   180  0a1b 20b508             	jsr storeaction	;unlucky 
   181                          
   182                          
   183                          
   184                          	;;;
   185                          
   186                          eol:
   187  0a1e a52f               	lda kx		; restore CursorX and CursorY 
   188  0a20 8527               	sta CursorX	; to continue reading screen loop
   189  0a22 a530               	lda ky
   190  0a24 8528               	sta CursorY
   191  0a26 fa                 	plx
   192  0a27 7a                 	ply
   193  0a28 68                 	pla
   194  0a29 60                 	rts
   195                          
   196                          addif:
   197  0a2a a92a               	lda #$2A
   198  0a2c c53c               	cmp qc
   199  0a2e d002               	bne addifreturn
   200  0a30 e631               	inc nn		; add neighbor
   201                          addifreturn:
   202  0a32 60                 	rts

; ******** Source: gol1.asm
    97                          		; the main algorithm
    98                          
    99                          fullscreen:
   100  0a33 a94f               	lda #79
   101  0a35 8527               	sta CursorX
   102  0a37 a93b               	lda #59
   103  0a39 8528               	sta CursorY
   104                          goleft:
   105  0a3b 20460a             	jsr column
   106  0a3e c627               	dec CursorX
   107  0a40 d0f9               	bne goleft
   108  0a42 20460a             	jsr column
   109  0a45 60                 	rts		; Return to caller
   110                          
   111                          column:
   112  0a46 20550a             	jsr veraprint
   113  0a49 c628               	dec CursorY
   114  0a4b d0f9               	bne column
   115  0a4d 20550a             	jsr veraprint
   116  0a50 a93b               	lda #59
   117  0a52 8528               	sta CursorY
   118  0a54 60                 	rts
   119                          	
   120                          
   121                          veraprint:
   122  0a55 48                 	pha
   123  0a56 5a                 	phy
   124  0a57 da                 	phx
   125                          	; set the memory addr
   126  0a58 20820a             	jsr sexy
   127                          	; send the char to VERA at x y
   128  0a5b a429               	ldy Character
   129  0a5d 8c239f             	sty veradat
   130  0a60 a42a               	ldy Colour
   131  0a62 8c239f             	sty veradat
   132  0a65 fa                 	plx
   133  0a66 7a                 	ply
   134  0a67 68                 	pla
   135  0a68 60                 	rts
   136                          
   137                          veraquery:
   138  0a69 48                 	pha
   139  0a6a 5a                 	phy
   140  0a6b da                 	phx
   141                          	; set the memory addr
   142  0a6c 20820a             	jsr sexy
   143                          	; send the char to VERA at x y
   144  0a6f ad239f             	lda veradat
   145  0a72 853c               	sta qc		; store the char we got back
   146  0a74 fa                 	plx
   147  0a75 7a                 	ply
   148  0a76 68                 	pla
   149  0a77 60                 	rts
   150                          
   151                          SetVeraADDR:             
   152                                                  
   153                          		; A contains vera Hi addr,
   154                          		; Y contains vera mid
   155                          		; X contains vera lo
   156                          
   157  0a78 8d229f                             sta verahi
   158  0a7b 8c219f                             sty veramid
   159  0a7e 8e209f                             stx veralo
   160  0a81 60                 		rts
   161                          
   162                          sexy:
   163  0a82 a527               		lda CursorX
   164  0a84 0a                 		asl  ; mul 2
   165  0a85 aa                 		tax ; put lo byte into x
   166  0a86 a900               		lda #0
   167  0a88 2a                 		rol  ; get 9th bit
   168  0a89 6528               		adc CursorY ; add Y*256 effectivly
   169  0a8b a8                 		tay ; put mi byte into y
   170  0a8c a910               		lda #$10 ; set incremement
   171  0a8e 20780a             		jsr SetVeraADDR
   172  0a91 60                 		rts
   173                          
   174  0a92 54455354494e4720....string !pet	"testing x y coords - waiting for enter...",13,0

; ******** Source: grid.inc
     1                          .actions
     2  0abd 2a0f0a             !byte $2A,$0F,$0A
     3  0ac0 2a100a             !byte $2A,$10,$0A
     4  0ac3 2a110a             !byte $2A,$11,$0A
     5  0ac6 2a150a             !byte $2A,$15,$0A
     6  0ac9 2a160a             !byte $2A,$16,$0A
     7  0acc 2a170a             !byte $2A,$17,$0A
     8  0acf 2a0d0c             !byte $2A,$0D,$0C
     9  0ad2 2a120c             !byte $2A,$12,$0C
    10  0ad5 2a140c             !byte $2A,$14,$0C
    11  0ad8 2a190c             !byte $2A,$19,$0C
    12  0adb 2a0d0d             !byte $2A,$0D,$0D
    13  0ade 2a120d             !byte $2A,$12,$0D
    14  0ae1 2a140d             !byte $2A,$14,$0D
    15  0ae4 2a190d             !byte $2A,$19,$0D
    16  0ae7 2a0d0e             !byte $2A,$0D,$0E
    17  0aea 2a120e             !byte $2A,$12,$0E
    18  0aed 2a140e             !byte $2A,$14,$0E
    19  0af0 2a190e             !byte $2A,$19,$0E
    20  0af3 2a0f0f             !byte $2A,$0F,$0F
    21  0af6 2a100f             !byte $2A,$10,$0F
    22  0af9 2a110f             !byte $2A,$11,$0F
    23  0afc 2a150f             !byte $2A,$15,$0F
    24  0aff 2a160f             !byte $2A,$16,$0F
    25  0b02 2a170f             !byte $2A,$17,$0F
    26  0b05 2a0f11             !byte $2A,$0F,$11
    27  0b08 2a1011             !byte $2A,$10,$11
    28  0b0b 2a1111             !byte $2A,$11,$11
    29  0b0e 2a1511             !byte $2A,$15,$11
    30  0b11 2a1611             !byte $2A,$16,$11
    31  0b14 2a1711             !byte $2A,$17,$11
    32  0b17 2a0d12             !byte $2A,$0D,$12
    33  0b1a 2a1212             !byte $2A,$12,$12
    34  0b1d 2a1412             !byte $2A,$14,$12
    35  0b20 2a1912             !byte $2A,$19,$12
    36  0b23 2a0d13             !byte $2A,$0D,$13
    37  0b26 2a1213             !byte $2A,$12,$13
    38  0b29 2a1413             !byte $2A,$14,$13
    39  0b2c 2a1913             !byte $2A,$19,$13
    40  0b2f 2a0d14             !byte $2A,$0D,$14
    41  0b32 2a1214             !byte $2A,$12,$14
    42  0b35 2a1414             !byte $2A,$14,$14
    43  0b38 2a1914             !byte $2A,$19,$14
    44  0b3b 2a0f16             !byte $2A,$0F,$16
    45  0b3e 2a1016             !byte $2A,$10,$16
    46  0b41 2a1116             !byte $2A,$11,$16
    47  0b44 2a1516             !byte $2A,$15,$16
    48  0b47 2a1616             !byte $2A,$16,$16
    49  0b4a 2a1716             !byte $2A,$17,$16
    50  0b4d 2a1024             !byte $2A,$10,$24
    51  0b50 2a2e24             !byte $2A,$2E,$24
    52  0b53 2a2f24             !byte $2A,$2F,$24
    53  0b56 2a1125             !byte $2A,$11,$25
    54  0b59 2a2d25             !byte $2A,$2D,$25
    55  0b5c 2a2f25             !byte $2A,$2F,$25
    56  0b5f 2a0f26             !byte $2A,$0F,$26
    57  0b62 2a1026             !byte $2A,$10,$26
    58  0b65 2a1126             !byte $2A,$11,$26
    59  0b68 2a2f26             !byte $2A,$2F,$26
    60  0b6b 2a1f36             !byte $2A,$1F,$36
    61  0b6e 2a2037             !byte $2A,$20,$37
    62  0b71 2a1e38             !byte $2A,$1E,$38
    63  0b74 2a1f38             !byte $2A,$1F,$38
    64  0b77 2a2038             !byte $2A,$20,$38
    65  0b7a ffffff             !byte $FF,$FF,$FF

; ******** Source: gol1.asm
   176                          
